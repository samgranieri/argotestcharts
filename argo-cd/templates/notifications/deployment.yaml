{{- if .Values.notifications.enabled }}
apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ include "argocd.notifications" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: notifications
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 6 }}
      app.kubernetes.io/component: notifications
  template:
    metadata:
      {{- if .Values.notifications.podAnnotations }}
      annotations: {{- include "common.tplvalues.render" (dict "value" .Values.notifications.podAnnotations "context" $) | nindent 8 }}
      {{- end }}
      labels: {{- include "common.labels.standard" . | nindent 8 }}
        app.kubernetes.io/component: notifications
        {{- if .Values.notifications.podLabels }}
        {{- include "common.tplvalues.render" (dict "value" .Values.notifications.podLabels "context" $) | nindent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ include "argocd.notifications.serviceAccountName" . }}
      {{- include "argocd.imagePullSecrets" . | nindent 6 }}
      {{- if .Values.notifications.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" ( dict "value" .Values.notifications.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.notifications.affinity }}
      affinity: {{- include "common.tplvalues.render" ( dict "value" .Values.notifications.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.notifications.podAffinityPreset "component" "notifications" "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.notifications.podAntiAffinityPreset "component" "notifications" "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.notifications.nodeAffinityPreset.type "key" .Values.notifications.nodeAffinityPreset.key "values" .Values.notifications.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.notifications.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.notifications.tolerations "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.notifications.priorityClassName }}
      priorityClassName: {{ .Values.notifications.priorityClassName | quote }}
      {{- end }}
      {{- if .Values.notifications.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.notifications.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      containers:
        - name: notifications
          image: {{ include "argocd.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.notifications.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.notifications.command "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.notifications.args }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.notifications.args "context" $) | nindent 12 }}
          {{- else }}
          args:
            - argocd-notifications
            - --logformat
            - {{ .Values.notifications.logFormat | quote }}
            - --loglevel
            - {{ .Values.notifications.logLevel | quote }}
            - --metrics-port
            - {{ .Values.notifications.containerPorts.metrics | quote }}
            - --argocd-repo-server
            - {{ include "argocd.repo-server" . }}:{{ .Values.repoServer.service.port }}
          {{- if .Values.notifications.extraArgs }}
          {{- include "common.tplvalues.render" (dict "value" .Values.notifications.extraArgs "context" $) | nindent 12 }}
          {{- end }}
          {{- end }}
          env:
            {{- if .Values.notifications.extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .Values.notifications.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          envFrom:
            {{- if .Values.notifications.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.notifications.extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values.notifications.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.notifications.extraEnvVarsSecret "context" $) }}
            {{- end }}
          ports:
            - name: metrics
              containerPort: {{ .Values.notifications.containerPorts.metrics }}
              protocol: TCP
          {{- if .Values.notifications.resources }}
          resources: {{- toYaml .Values.notifications.resources | nindent 12 }}
          {{- end }}
          {{- if .Values.notifications.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.notifications.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          volumeMounts:
            {{- if .Values.config.tlsCerts }}
            - mountPath: /app/config/tls
              name: tls-certs
            {{- end }}
            - mountPath: /app/config/server/tls
              name: argocd-repo-server-tls
          {{- if .Values.notifications.extraVolumeMounts }}
          {{- include "common.tplvalues.render" (dict "value" .Values.notifications.extraVolumeMounts "context" $) | nindent 12 }}
          {{- end }}
      volumes:
        {{- if .Values.config.tlsCerts }}
        - name: tls-certs
          configMap:
            name: argocd-tls-certs-cm
        {{- end }}
        - name: argocd-repo-server-tls
          secret:
            items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
            optional: true
            secretName: argocd-repo-server-tls
        {{- if .Values.notifications.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.notifications.extraVolumes "context" $) | nindent 8 }}
        {{- end }}
{{- end }}
